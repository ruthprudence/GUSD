// src/Components/DBStatus.js
import { useEffect, useState } from 'react';
import { fetchDBStatus } from './API/statusService';

function DBStatus() {
  const [status, setStatus] = useState('loading');

  useEffect(() => {
    async function getStatus() {
      const result = await fetchDBStatus();
      setStatus(result);
    }
    getStatus();
  }, []);

  return (
    <div>
      <h2>Database Status: {status}</h2>
    </div>
  );
}

export default DBStatus;
// src/Components/DemographicFilters.js
import React from 'react';

const DemographicFilters = ({ demographicFilters, onFilterChange }) => {
  return (
    <div className="demographic-filters">
      <label>
        Grade:
        <select 
          value={demographicFilters.grade} 
          onChange={(e) => onFilterChange('grade', e.target.value)}
        >
          <option value="">All Grades</option>
          <option value="9">Grade 9</option>
          <option value="10">Grade 10</option>
          <option value="11">Grade 11</option>
          <option value="12">Grade 12</option>
        </select>
      </label>

      <label>
        Risk Status:
        <select 
          value={demographicFilters.atRisk} 
          onChange={(e) => onFilterChange('atRisk', e.target.value)}
        >
          <option value="">All Students</option>
          <option value="at-risk">At Risk</option>
          <option value="on-track">On Track</option>
        </select>
      </label>

      <label>
        ELL Status:
        <select 
          value={demographicFilters.ellStatus} 
          onChange={(e) => onFilterChange('ellStatus', e.target.value)}
        >
          <option value="">All</option>
          <option value="YES">ELL</option>
          <option value="NO">Non-ELL</option>
        </select>
      </label>

      <label>
        Foster Care:
        <select 
          value={demographicFilters.fosterCare} 
          onChange={(e) => onFilterChange('fosterCare', e.target.value)}
        >
          <option value="">All</option>
          <option value="YES">Foster Care</option>
          <option value="NO">Non-Foster Care</option>
        </select>
      </label>

      <label>
        Expected Graduation:
        <select 
          value={demographicFilters.expectedGraduation} 
          onChange={(e) => onFilterChange('expectedGraduation', e.target.value)}
        >
          <option value="">All Years</option>
          <option value="2024">2024</option>
          <option value="2025">2025</option>
          <option value="2026">2026</option>
          <option value="2027">2027</option>
        </select>
      </label>
    </div>
  );
};

export default DemographicFilters;// src/Components/GraduationDashboard.js
// src/Components/GraduationDashboard.js
import React, { useState, useEffect } from 'react';
import { fetchStudents } from './API/studentService';
import StudentSearch from './StudentSearch';
import StudentGrid from './StudentGrid';
import DemographicFilters from './DemographicFilters';

const GraduationDashboard = () => {
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [demographicFilters, setDemographicFilters] = useState({
    grade: '',
    school: '',
    gender: '',
    atRisk: '',
    ellStatus: '',
    fosterCare: '',
    expectedGraduation: ''
  });

  useEffect(() => {
    const loadStudents = async () => {
      try {
        setLoading(true);
        console.log('Starting to fetch students...');
        const data = await fetchStudents();
        console.log('Received student data:', data);
        setStudents(data);
        console.log('Set students state:', data);
      } catch (err) {
        console.error('Detailed error:', err);
        setError('Failed to load student data');
      } finally {
        setLoading(false);
        console.log('Loading complete');
      }
    };
    loadStudents();
  }, []);

  const handleFilterChange = (filterName, value) => {
    setDemographicFilters(prev => ({ ...prev, [filterName]: value }));
  };

  const filteredStudents = students.filter((student) => {
    const matchesSearch = !searchQuery || 
      `${student.First_Name} ${student.Last_Name}`.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesFilters = Object.entries(demographicFilters).every(([key, value]) => {
      if (!value) return true;
      switch (key) {
        case 'grade':
          return student.Grade === parseInt(value);
        case 'school':
          return student.School === value;
        case 'atRisk':
          return value === 'at-risk' ? student.isAtRisk : !student.isAtRisk;
        case 'ellStatus':
          return student.ELL_Status === value;
        case 'fosterCare':
          return student.Foster_Care === value;
        case 'expectedGraduation':
          return student.Expected_Graduation === value;
        default:
          return true;
      }
    });

    return matchesSearch && matchesFilters;
  });

  const calculateMetrics = () => {
    const total = filteredStudents.length;
    const atRisk = filteredStudents.filter(s => s.isAtRisk).length;
    const averageProgress = filteredStudents.reduce((acc, s) => acc + s.graduationProgress, 0) / total;

    return {
      totalStudents: total,
      atRiskCount: atRisk,
      averageProgress: isNaN(averageProgress) ? 0 : averageProgress,
      onTrackCount: filteredStudents.filter(s => s.graduationProgress >= 90).length
    };
  };

  if (loading) return <div>Loading student data...</div>;
  if (error) return <div className="error-message">{error}</div>;

  const metrics = calculateMetrics();

  return (
    <div className="dashboard-container">
      <div className="metrics-grid">
        <div className="metric-card">
          <h3>Total Students</h3>
          <div className="metric-value">{metrics.totalStudents}</div>
        </div>
        <div className="metric-card">
          <h3>At Risk Students</h3>
          <div className="metric-value risk">{metrics.atRiskCount}</div>
        </div>
        <div className="metric-card">
          <h3>Average Progress</h3>
          <div className="metric-value">{metrics.averageProgress.toFixed(1)}%</div>
        </div>
        <div className="metric-card">
          <h3>On Track to Graduate</h3>
          <div className="metric-value">{metrics.onTrackCount}</div>
        </div>
      </div>

      <div className="filters-section">
        <StudentSearch
          searchQuery={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        <DemographicFilters
          demographicFilters={demographicFilters}
          onFilterChange={handleFilterChange}
        />
      </div>

      <StudentGrid students={filteredStudents} />
    </div>
  );
};



export default GraduationDashboard;import React from 'react';
import { calculateGraduationProgress } from './API/utils';

const StudentCard = ({ student }) => {
  console.log(`Rendering Student Card for ${student.First_Name} ${student.Last_Name}`);
  console.log('Student Data:', student);

  const formattedGraduationProgress =
    student.graduationProgress !== undefined ? `${student.graduationProgress.toFixed(1)}%` : 'N/A';
  
  const attendance = student.Attendance !== undefined ? `${student.Attendance}%` : 'N/A';

  return (
    <div className="student-card">
      <div className="student-header">
        <h4>{student.First_Name} {student.Last_Name}</h4>
      </div>
      <div className="student-content">
        <div className="demographics-section">
          <h5>Demographics</h5>
          <table>
            <tbody>
              <tr>
                <th>School</th>
                <td>{student.School}</td>
              </tr>
              <tr>
                <th>Grade</th>
                <td>{student.Grade}</td>
              </tr>
            </tbody>
          </table>
        </div>
        <div className="progress-section">
          <h5>Attendance and Graduation Progress</h5>
          <table>
            <tbody>
              <tr>
                <th>Attendance</th>
                <td>{attendance}</td>
              </tr>
              <tr>
                <th>Graduation Progress</th>
                <td>{formattedGraduationProgress}</td>
              </tr>
              <tr>
                <th>At Risk</th>
                <td>{student.isAtRisk ? 'Yes' : 'No'}</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default StudentCard;



// const StudentCard = ({ student }) => {
//   const graduationProgress = calculateGraduationProgress(student);
//   const formattedGraduationProgress = graduationProgress !== undefined ? 
//     `${graduationProgress.toFixed(1)}%` : 'N/A';
//   const attendance = student.Attendance !== undefined ? 
//     `${student.Attendance.toFixed(1)}%` : 'N/A';

//   const riskStatus = student.isAtRisk ? 
//     'bg-red-100 border-red-500' : 
//     'bg-green-100 border-green-500';

//   return (
//     <div className={`student-card border-2 p-4 rounded-lg ${riskStatus}`}>
//       <div className="student-header mb-4">
//         <h4 className="text-lg font-bold">
//           {student.First_Name} {student.Last_Name}
//         </h4>
//       </div>
//       <div className="student-content grid gap-4">
//         <div className="demographics-section">
//           <h5 className="font-semibold mb-2">Demographics</h5>
//           <table className="w-full">
//             <tbody>
//               <tr>
//                 <th className="text-left">School</th>
//                 <td>{student.School}</td>
//               </tr>
//               <tr>
//                 <th className="text-left">Grade</th>
//                 <td>{student.Grade}</td>
//               </tr>
//               <tr>
//                 <th className="text-left">ELL Status</th>
//                 <td>{student.ELL_Status}</td>
//               </tr>
//               <tr>
//                 <th className="text-left">Foster Care</th>
//                 <td>{student.Foster_Care}</td>
//               </tr>
//             </tbody>
//           </table>
//         </div>
//         <div className="progress-section">
//           <h5 className="font-semibold mb-2">Progress</h5>
//           <table className="w-full">
//             <tbody>
//               <tr>
//                 <th className="text-left">Attendance</th>
//                 <td>{attendance}</td>
//               </tr>
//               <tr>
//                 <th className="text-left">Graduation Progress</th>
//                 <td>{formattedGraduationProgress}</td>
//               </tr>
//               <tr>
//                 <th className="text-left">Status</th>
//                 <td className={student.isAtRisk ? 'text-red-600' : 'text-green-600'}>
//                   {student.isAtRisk ? 'At Risk' : 'On Track'}
//                 </td>
//               </tr>
//             </tbody>
//           </table>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default StudentCard;import React from 'react';
import StudentCard from './StudentCard';

const StudentGrid = ({ students }) => {
  return (
    <div className="students-grid">
      {students.map((student) => (
        <StudentCard key={student.ID} student={student} />
      ))}
    </div>
  );
};

export default StudentGrid;import React from 'react';

const StudentSearch = ({ searchQuery, onChange }) => {
  return (
    <div className="search-container">
      <input
        type="text"
        value={searchQuery}
        onChange={onChange}
        placeholder="Search for a student"
      />
    </div>
  );
};

export default StudentSearch;